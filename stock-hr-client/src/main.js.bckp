const { app, BrowserWindow } = require('electron');
const path = require('node:path');
const { ipcMain } = require('electron');
const { machineIdSync } = require('node-machine-id');
const axios = require('axios'); // For HTTP requests; install it: npm install axios
const Store = require('electron-store');
const store = new Store(); // Electron-store to save token


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    kiosk: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow();

  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


ipcMain.handle('activate-license', async (event, licenseKey) => {
  try {
    // Get a unique machine ID
    const hardwareId = machineIdSync({ original: true });
    
    // Prepare activation data
    const activationData = {
      licenseKey,
      hardwareId,
    };

    // Send activation data to your backend licensing endpoint
    // Replace the URL below with your actual endpoint URL
    const response = await axios.post('http://localhost:3000/activate-license', activationData);
    
    // Return response message
    return response.data.message;
  } catch (error) {
    console.error('Activation error:', error);
    return 'Activation failed. Please contact support.';
  }
});

// Retrieve user role from stored token
ipcMain.handle('get-user-role', async () => {
  const token = store.get('jwt_token');
  if (!token) return { success: false };

  try {
    // Decode token (or verify it via backend if needed)
    const decoded = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
    return { success: true, role: decoded.role };
  } catch {
    return { success: false };
  }
});

// Logout handler
ipcMain.handle('logout-user', () => {
  store.delete('jwt_token');
});
